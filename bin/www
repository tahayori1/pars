#!/usr/bin/env node

var mar = [];
var menu = {
    title: 'موسسه زبان پارسا',
    desc: 'در اینجا می توانید اطلاعات کاملی درباره موسسه داشته باشید',
    text: 'به ربات موسسه زبان پارسا خوش آمدید، در کدام یک از موارد زیر میتوانم کمک کنم؟',
    photo: '',
    time: 'الان',
    type: 'select',
    items: {
        'معرفی موسسه': {
            type: 'select',
            text: 'در سال 1380 خورشیدی در شهر شیراز  تاسیس شد',
            items: {
                'آشنایی با دپارتمان ها': {
                    type: 'select',
                    text: 'موسسه زبان پارسا از دپارتمان های تخصصی به شرح زیر تشکیل شده است برای اطلاعات بیشتر دپارتمان مورد نظر خود را انتخاب کنید.',
                    items: {
                        'انگلیسی': {
                            type: 'select',
                            text: 'دپارتمان در سال 1380 خورشیدی در شهر شیراز  تاسیس شد',
                            items: {
                                'انگلیسی': {
                                    type: 'text',
                                    text: 'در سال 1380 خورشیدی در شهر شیراز  تاسیس شد'
                                },
                            }
                        },
                        'عربی': {
                            type: 'text',
                            text: 'در سال 1380 خورشیدی در شهر شیراز  تاسیس شد'
                        },
                        'آلمانی': {
                            type: 'select',
                            text: 'در سال 1380 خورشیدی در شهر شیراز  تاسیس شد',
                            items: {}
                        },
                        'فرانسه': {
                            type: 'text',
                            text: 'در سال 1380 خورشیدی در شهر شیراز  تاسیس شد'
                        },
                        'ترکی': {
                            type: 'text',
                            text: 'در سال 1380 خورشیدی در شهر شیراز  تاسیس شد'
                        },
                        'چینی': {
                            type: 'text',
                            text: 'در سال 1380 خورشیدی در شهر شیراز  تاسیس شد'
                        }
                    }
                },
                'دوره های آموزش آنلاین': {
                    type: 'text',
                    text: 'در سال 1380 خورشیدی در شهر شیراز  تاسیس شد'
                },
                'شرایط ثبت نام': {
                    type: 'text',
                    text: 'در سال 1380 خورشیدی در شهر شیراز  تاسیس شد'
                },
                'شهریه دوره ها': {
                    type: 'select',
                    text: 'متقاضی کدام نوع از دوره ها هستید؟',
                    items: {
                        'ترمیک': {
                            type: 'select', 
                                text:' فشرده یا معمولی' , 
                                items:{
                                    'فشرده':{},
                                 'معمولی':{},
                                }
                            },
                        'خصوصی': {}
                    },
                },
            }
        },
        'ثبت نام': {
            title: 'ثبت نام',
            type: 'input',
            text: 'برای ثبت نام  در موسسه زبان پارسا فرم زیر را تکمیل فرمایید',
            items: [{
                    name: 'نام و نام خانوادگی',
                    type: 'text',
                    len: 0,
                    desc: ''
},
                {
                    name: 'شماره تماس',
                    type: 'tel',
                    len: 13,
                    desc: 'به همراه کد کشور وارد کنید برای مثال: +989013443574'
},
                {
                    name: 'شماره ملی',
                    type: 'number',
                    len: 10,
                    desc: ''
},
                {
                    name: 'زبان مورد نظر',
                    type: 'select',
                    items: ['انگلیسی', 'عربی', 'فرانسه', 'ترکی', 'آلمانی', 'اسپانیایی', 'چینی', 'کره ای', 'ژاپنی', 'روسی'],
                    len: 0,
                    desc: ''
}]

        },
        'امور دانشجویی': {
            title: 'امور دانشجویی',
            desc: 'استعلام کارنامه و دانلود جزوات و کلاسهای آنلاین در این قسمت قرار دارد.',
            photo: '',
            time: 'الان',
            type: 'input',
            text: 'به ربات امور دانشجویی موسسه زبان پارسا خوش آمدید، برای استفاده از خدمات لازم است  کد ملی خود را وارد نمایید.',
            items: [{
                    name: 'شماره ملی',
                    type: 'text',
                    len: 0,
                    desc: 'کد ملی ده رقمی را وارد کنید'
},
                {
                    name: 'شماره موبایل',
                    type: 'text',
                    len: 0,
                    desc: 'شماره موبایل را به همراه صفر آغازین و بدون +98 وارد کنید مثال:09100000000 '
}]


        }
    },
};

var clients_list = {};
/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('parsa:server');
var http = require('http');
var https = require('https');
var fs = require('fs');
fs.readFile('./reportcard.txt', 'utf-8', function read(err, data) {
    if (err) {
        throw err;
    }
    content = data;

    // Invoke the next step here however you like

    processFile(content); // Or put the next step in a function and invoke it
});
var classes = [];
var students = {}
var reports = {}

function processFile(content) {

    content = content.split('\n');
    i = -1;
    content.forEach((x) => {

        x = x.split(',');
        if (x[0][0] == '@' || x[0][1] == '@') {
            var classDesc = {};
            classDesc.language = x[0].replace('@', '');
            classDesc.level = x[2];
            classDesc.teacher = x[1];
            classDesc.date = x[3];
            classes.push(classDesc);
            i++;

        } else if (x[0][0] == '#') {

            var student = {};
            student.id = x[0].replace('#', '');
            student.tel = x[6];
            student.name = x[7];
            students[x[0].replace('#', '')] = student;
            var report = {};
            report.absence = x[1];
            report.ca = x[2];
            report.mt = x[3];
            report.final = x[4];
            report.total = x[5];
            report.cl = (i == -1) ? classes[0] : classes[i];
            reports[x[0].replace('#', '')] = report;
            //reports.push(report);

        }

    })
    /* console.log(students['2281457769'], reports['2281457769']);*/

}

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '8080');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
var io = require('socket.io')(server);

io.on('connection', function (socket) {

    function responser(room, data) {
        var now = new Date();
        var str = {
            date: now.getTime(),
            message: data,
            room: room
        }
        io.to(`${socket.id}`).emit(room, JSON.stringify(str));
        return false;
    }

    function reciever(msg) {
        msg = JSON.parse(msg);
        console.log(address + ',' + socket.id + ' @ ' + new Date(msg.date));
        return msg.message;
    }
    var address = socket.handshake.address;
    var userAddress = address + ',' + socket.id;
    console.log(address + ',' + socket.id + ' Is Conected');

    function reportCard(x, y) {
        x = x.toEnglishDigit();
        y = y.toEnglishDigit();
        var str = ''
        if (students[x] && students[x].tel == y) {
            var result = ''
            var total = parseFloat(reports[x].ca) + parseFloat(reports[x].mt) + parseFloat(parseFloat(reports[x].final));
            var total = parseFloat(reports[x].total);
            if (total > 69) {
                result = 'تبریک 😍👏 شما این دوره آموزشی را قبول شدید.';
            } else {
                result = 'شما باید این دوره را تکرار کنید 😢';
            }
            if (true /*students[x] != undefined && reports[x].cl != undefined*/ ) {
                console.log(reports[x]);
                str += 'سلام <br/>'
                str += students[x].name //name
                str += ' عزیز<br/>' + result;
                str += '<br/>'
                str += 'نتایج کلاس '
                if (reports[x].cl != undefined) {
                    str += reports[x].cl.language //Language
                    str += ' سطح '
                    str += reports[x].cl.level //Level
                    str += ' با استاد '
                    str += reports[x].cl.teacher //Master
                    str += '<br/>'
                }
                str += 'به شرح زیر می باشد:'
                str += '<br/>'
                str += 'تعداد غیبت:'
                str += reports[x].absence //Absence
                str += '<br/>'
                str += 'فعالیت کلاسی:'
                str += reports[x].ca //Class Activity
                str += '<br/>'
                str += 'میان ترم:'
                str += reports[x].mt //MidTerm
                str += '<br/>'
                str += 'پایان ترم:'
                str += reports[x].final //Final
                str += '<br/>'
                str += '<b>نمره کل:'
                str += reports[x].total;
                str += '</b><br/>'
                str += 'شماره تلفن ثبت شده شما در سیستم:'
                str += students[x].tel //Tel
            } else {
                str += 'خطا در نتایج';

            }

        } else {
            str = 'موردی یافت نشد',
                JSON.stringify(students[x]);
        }

        return str;
    }
    socket.on('chat', function (msg) {
        msg = reciever(msg);
        msg = msg.split(',');
        if (msg[0] == '#reg') {
            msg.shift() //reg
            msg.shift() //َشروع
            var MenuName = msg.shift(); //menu name
            msg = JSON.parse(msg);
            if (MenuName == 'امور دانشجویی') {
                var x = reportCard(msg['شماره ملی'], msg['شماره موبایل']);
                responser('chat', x);
            } else if (MenuName == 'ثبت نام') {
                responser('chat', 'ثبت نام انجام شد')
            }
        } else {
            parserObj(1, msg, menu);
        }

        function parserObj(i, arr, itm) {
            if (itm) {
                var myTitle = arr[i];

                if (itm.items && itm.items[myTitle]) {
                    parserObj(++i, arr, itm.items[myTitle]);
                } else if (itm[myTitle]) {
                    responser('chat', itm[myTitle]);
                } else if (itm.text) {
                    responser('chat', itm);
                } else {
                    responser('chat', itm);
                }
            } else {
                responser('chat', 'پاسخی نداریم')
            }
        }

        return false;
    });
});
String.prototype.toEnglishDigit = function () {
    var find = ['۰', '۱', '۲', '۳', '۴', '۵', '۶', '۷', '۸', '۹'];
    var replace = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'];
    var replaceString = this;
    var regex;
    for (var i = 0; i < find.length; i++) {
        regex = new RegExp(find[i], "g");
        replaceString = replaceString.replace(regex, replace[i]);
    }
    return replaceString;
};
/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string' ?
        'Pipe ' + port :
        'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string' ?
        'pipe ' + addr :
        'port ' + addr.port;
    debug('Listening on ' + bind);
}
